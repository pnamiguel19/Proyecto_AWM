/**
 * FORMULARIO DE LOGIN / INICIO DE SESI√ìN
 * Manejo de DOM, validaciones y eventos con notificaciones
 */

// ================================
// SELECCI√ìN DE ELEMENTOS DEL DOM
// ================================
const form = document.getElementById('loginForm');
const emailInput = document.getElementById('email');
const passwordInput = document.getElementById('password');
const rememberCheckbox = document.getElementById('remember');
const submitBtn = document.getElementById('submitBtn');
const googleBtn = document.getElementById('googleBtn');
const facebookBtn = document.getElementById('facebookBtn');
const notificationContainer = document.getElementById('notificationContainer');

// Elementos de error
const errorEmail = document.getElementById('error-email');
const errorPassword = document.getElementById('error-password');

// ================================
// SISTEMA DE NOTIFICACIONES
// ================================

/**
 * Muestra una notificaci√≥n flotante
 * @param {string} type - 'success' o 'error'
 * @param {string} icon - Emoji o icono
 * @param {string} message - Mensaje a mostrar
 * @param {number} duration - Duraci√≥n en ms (0 = sin auto-remover)
 */
function showNotification(type, icon, message, duration = 4000) {
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.setAttribute('role', 'alert');
    notification.setAttribute('aria-live', 'polite');

    notification.innerHTML = `
        <div class="notification-content">
            <span class="notification-icon">${icon}</span>
            <span class="notification-message">${message}</span>
        </div>
    `;

    notificationContainer.appendChild(notification);

    setTimeout(() => {
        notification.classList.add('show');
    }, 10);

    if (duration > 0) {
        setTimeout(() => {
            notification.classList.remove('show');
            setTimeout(() => {
                notification.remove();
            }, 300);
        }, duration);
    }

    console.log(`üì¢ [${type.toUpperCase()}] ${message}`);
}

/**
 * Muestra notificaci√≥n de √©xito
 */
function showSuccess(message, duration = 4000) {
    showNotification('success', '‚úÖ', message, duration);
}

/**
 * Muestra notificaci√≥n de error
 */
function showError(message, duration = 5000) {
    showNotification('error', '‚ùå', message, duration);
}

// ================================
// OBJETO CON REGLAS DE VALIDACI√ìN
// ================================
const validationRules = {
    email: {
        element: emailInput,
        errorElement: errorEmail,
        required: true,
        validators: [
            {
                test: (value) => /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(value),
                message: 'Por favor ingresa un correo electr√≥nico v√°lido'
            }
        ]
    },
    password: {
        element: passwordInput,
        errorElement: errorPassword,
        required: true,
        validators: [
            {
                test: (value) => value.length >= 8,
                message: 'La contrase√±a debe tener al menos 8 caracteres'
            }
        ]
    }
};

// ================================
// FUNCIONES DE VALIDACI√ìN
// ================================

/**
 * Valida un campo individual
 * @param {string} fieldName - Nombre del campo a validar
 * @returns {boolean} - True si el campo es v√°lido
 */
function validateField(fieldName) {
    const rule = validationRules[fieldName];
    const value = rule.element.value;

    // Validar si es un campo requerido y est√° vac√≠o
    if (rule.required && value.trim() === '') {
        showFieldError(fieldName, 'Este campo es requerido');
        return false;
    }

    // Ejecutar validadores personalizados
    for (let validator of rule.validators) {
        if (!validator.test(value)) {
            showFieldError(fieldName, validator.message);
            return false;
        }
    }

    // Si todo es v√°lido
    clearFieldError(fieldName);
    return true;
}

/**
 * Muestra error en un campo
 * @param {string} fieldName - Nombre del campo
 * @param {string} message - Mensaje de error
 */
function showFieldError(fieldName, message) {
    const rule = validationRules[fieldName];
    rule.element.classList.remove('valid');
    rule.element.classList.add('invalid');
    rule.errorElement.textContent = '‚ùå ' + message;
}

/**
 * Limpia el error de un campo
 * @param {string} fieldName - Nombre del campo
 */
function clearFieldError(fieldName) {
    const rule = validationRules[fieldName];
    rule.element.classList.remove('invalid');
    rule.element.classList.add('valid');
    rule.errorElement.textContent = '';
}

/**
 * Valida el formulario completo
 * @returns {boolean} - True si todo es v√°lido
 */
function validateForm() {
    const fields = Object.keys(validationRules);
    let isValid = true;

    console.log('üîç Iniciando validaci√≥n del formulario de login...');

    for (let field of fields) {
        if (!validateField(field)) {
            isValid = false;
            console.log(`‚ùå Campo inv√°lido: ${field}`);
        } else {
            console.log(`‚úÖ Campo v√°lido: ${field}`);
        }
    }

    return isValid;
}

/**
 * Limpia todos los errores
 */
function clearAllErrors() {
    Object.keys(validationRules).forEach(field => {
        const rule = validationRules[field];
        rule.element.classList.remove('invalid', 'valid');
        rule.errorElement.textContent = '';
    });
}

// ================================
// EVENT LISTENERS - VALIDACI√ìN EN TIEMPO REAL
// ================================

/**
 * Validaci√≥n al salir del campo (blur)
 */
emailInput.addEventListener('blur', () => {
    console.log('üëÅÔ∏è Validando email al salir del campo');
    validateField('email');
});

passwordInput.addEventListener('blur', () => {
    console.log('üëÅÔ∏è Validando contrase√±a al salir del campo');
    validateField('password');
});

/**
 * Validaci√≥n mientras se escribe (input)
 */
emailInput.addEventListener('input', () => {
    if (emailInput.classList.contains('invalid')) {
        validateField('email');
    }
    updateSubmitButton();
});

passwordInput.addEventListener('input', () => {
    if (passwordInput.classList.contains('invalid')) {
        validateField('password');
    }
    updateSubmitButton();
});

// ================================
// EVENT LISTENERS - RECORDARME
// ================================

/**
 * Manejo del checkbox "Recordarme"
 */
rememberCheckbox.addEventListener('change', (event) => {
    if (event.target.checked) {
        console.log('‚úÖ Opci√≥n "Recordarme" activada');
        // Guardar en localStorage
        localStorage.setItem('rememberLogin', 'true');
    } else {
        console.log('‚ùå Opci√≥n "Recordarme" desactivada');
        localStorage.removeItem('rememberLogin');
    }
});

// ================================
// EVENT LISTENERS - REDES SOCIALES
// ================================

/**
 * Bot√≥n de Google
 */
googleBtn.addEventListener('click', (event) => {
    event.preventDefault();
    console.log('üîó Intento de login con Google');
    showNotification('info', '‚ÑπÔ∏è', 'Redirigiendo a Google...', 3000);
    // window.location.href = 'https://accounts.google.com/';
});

/**
 * Bot√≥n de Facebook
 */
facebookBtn.addEventListener('click', (event) => {
    event.preventDefault();
    console.log('üîó Intento de login con Facebook');
    showNotification('info', '‚ÑπÔ∏è', 'Redirigiendo a Facebook...', 3000);
    // window.location.href = 'https://www.facebook.com/';
});

// ================================
// EVENT LISTENER - ENV√çO DEL FORMULARIO
// ================================

/**
 * Env√≠o del formulario (submit)
 */
form.addEventListener('submit', (event) => {
    event.preventDefault();
    
    console.log('üì§ Intento de env√≠o del formulario de login');

    // Validar todo el formulario
    if (validateForm()) {
        // ‚úÖ TODOS LOS CAMPOS V√ÅLIDOS
        const datosLogin = {
            email: emailInput.value.trim(),
            password: passwordInput.value,
            recordarme: rememberCheckbox.checked
        };

        console.log('‚úÖ‚úÖ‚úÖ DATOS DE LOGIN V√ÅLIDOS');
        console.log('üìã Datos:', datosLogin);

        // Mostrar notificaci√≥n de √©xito
        showSuccess(`¬°Bienvenido! Iniciando sesi√≥n...`, 3000);

        // Simular validaci√≥n con servidor
        console.log('üîÑ Validando credenciales con servidor...');

        // Despu√©s de 2 segundos, simular redirecci√≥n
        setTimeout(() => {
            console.log('‚úÖ Login exitoso. Redirigiendo...');
            
            // Guardar en localStorage si "Recordarme" est√° marcado
            if (datosLogin.recordarme) {
                localStorage.setItem('userEmail', datosLogin.email);
                localStorage.setItem('lastLogin', new Date().toLocaleString());
                console.log('üíæ Datos guardados en localStorage');
            }

            // Aqu√≠ ir√≠a la redirecci√≥n real
            // window.location.href = 'dashboard.html';
            
        }, 2000);

    } else {
        // ‚ùå HAY ERRORES EN EL FORMULARIO
        console.log('‚ùå‚ùå‚ùå FORMULARIO CON ERRORES');
        showError('Por favor corrige los errores marcados en rojo', 5000);
    }
});

// ================================
// FUNCI√ìN - HABILITAR/DESHABILITAR BOT√ìN
// ================================

/**
 * Actualiza el estado del bot√≥n de env√≠o
 */
function updateSubmitButton() {
    const emailValid = emailInput.value.trim() !== '';
    const passwordValid = passwordInput.value.trim() !== '';

    submitBtn.disabled = !(emailValid && passwordValid);
    
    if (emailValid && passwordValid) {
        submitBtn.style.opacity = '1';
        submitBtn.style.cursor = 'pointer';
    } else {
        submitBtn.style.opacity = '0.6';
        submitBtn.style.cursor = 'not-allowed';
    }
}

// ================================
// CARGAR DATOS GUARDADOS (RECORDARME)
// ================================

/**
 * Al cargar la p√°gina, recuperar datos si "Recordarme" estaba activado
 */
function loadSavedLogin() {
    const savedEmail = localStorage.getItem('userEmail');
    const lastLogin = localStorage.getItem('lastLogin');

    if (savedEmail) {
        console.log('üíæ Recuperando email guardado desde localStorage');
        emailInput.value = savedEmail;
        rememberCheckbox.checked = true;
        console.log(`üìß Email restaurado: ${savedEmail}`);
        console.log(`‚è∞ √öltimo login: ${lastLogin}`);
        showNotification('info', '‚ÑπÔ∏è', `Bienvenido de nuevo. Tu email ha sido recuperado.`, 4000);
    }
}

// ================================
// INICIALIZACI√ìN
// ================================

document.addEventListener('DOMContentLoaded', () => {
    console.log('‚úÖ Script de login cargado correctamente');
    console.log('üìç P√°gina: Iniciar Sesi√≥n');
    
    // Cargar datos guardados si existen
    loadSavedLogin();
    
    // Inicializar estado del bot√≥n
    updateSubmitButton();
    
    // Mostrar bienvenida
    showNotification('info', '‚ÑπÔ∏è', 'Ingresa tus credenciales para continuar', 3000);
});